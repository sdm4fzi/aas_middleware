# generated by datamodel-codegen:
#   filename:  ProvisionofSimulationModelsAAS_schema_recreated.json
#   timestamp: 2024-09-28T13:27:41+00:00

from __future__ import annotations

from pydantic import BaseModel, Field


class BinaryConnector(BaseModel):
    id_short: str = Field(..., examples=['BinaryConnector'], title='Id Short')
    description: str = Field(
        ...,
        examples=[
            'Submodel element collection with id BinaryConnector that contains submodel elements'
        ],
        title='Description',
    )
    semantic_id: str = Field(..., examples=[''], title='Semantic Id')
    binary_con_name: str = Field(..., examples=[], title='Binary Con Name')
    binary_con_description: str = Field(
        ..., examples=[], title='Binary Con Description'
    )


class Email(BaseModel):
    id_short: str = Field(..., examples=['Email'], title='Id Short')
    description: str = Field(
        ...,
        examples=[
            'Submodel element collection with id Email that contains submodel elements'
        ],
        title='Description',
    )
    semantic_id: str = Field(..., examples=[''], title='Semantic Id')
    type_of_email_address: str = Field(..., examples=[], title='Type Of Email Address')
    email_address: str = Field(..., examples=[], title='Email Address')
    type_of_public_key: str = Field(..., examples=[], title='Type Of Public Key')
    public_key: str = Field(..., examples=[], title='Public Key')


class ModelFileVersion(BaseModel):
    id_short: str = Field(..., examples=['ModelFileVersion'], title='Id Short')
    description: str = Field(
        ...,
        examples=[
            'Submodel element collection with id ModelFileVersion that contains submodel elements'
        ],
        title='Description',
    )
    semantic_id: str = Field(..., examples=[''], title='Semantic Id')
    model_version_id: str = Field(..., examples=[], title='Model Version Id')
    model_file_release_notes_txt: str = Field(
        ..., examples=[], title='Model File Release Notes Txt'
    )


class Phone(BaseModel):
    id_short: str = Field(..., examples=['Phone'], title='Id Short')
    description: str = Field(
        ...,
        examples=[
            'Submodel element collection with id Phone that contains submodel elements'
        ],
        title='Description',
    )
    semantic_id: str = Field(..., examples=[''], title='Semantic Id')
    type_of_telephone: str = Field(..., examples=[], title='Type Of Telephone')
    telephone_number: str = Field(..., examples=[], title='Telephone Number')
    available_time: str = Field(..., examples=[], title='Available Time')


class SimModManufacturerInformation(BaseModel):
    id_short: str = Field(
        ..., examples=['SimModManufacturerInformation'], title='Id Short'
    )
    description: str = Field(
        ...,
        examples=[
            'Submodel element collection with id SimModManufacturerInformation that contains submodel elements'
        ],
        title='Description',
    )
    semantic_id: str = Field(..., examples=[''], title='Semantic Id')
    company: str = Field(..., examples=[], title='Company')
    language: str = Field(..., examples=[], title='Language')
    email: Email = Field(..., examples=[])
    phone: Phone = Field(..., examples=[])


class SimPurpose(BaseModel):
    id_short: str = Field(..., examples=['SimPurpose'], title='Id Short')
    description: str = Field(
        ...,
        examples=[
            'Submodel element collection with id SimPurpose that contains submodel elements'
        ],
        title='Description',
    )
    semantic_id: str = Field(..., examples=[''], title='Semantic Id')
    pos_sim_purpose: str = Field(..., examples=[], title='Pos Sim Purpose')
    neg_sim_purpose: str = Field(..., examples=[], title='Neg Sim Purpose')


class TestedToolSolverAlgorithm(BaseModel):
    id_short: str = Field(..., examples=['TestedToolSolverAlgorithm'], title='Id Short')
    description: str = Field(
        ...,
        examples=[
            'Submodel element collection with id TestedToolSolverAlgorithm that contains submodel elements'
        ],
        title='Description',
    )
    semantic_id: str = Field(..., examples=[''], title='Semantic Id')
    solver_algorithm: str = Field(..., examples=[], title='Solver Algorithm')
    tool_solver_further_description: str = Field(
        ..., examples=[], title='Tool Solver Further Description'
    )
    tolerance: float = Field(..., examples=[], title='Tolerance')


class Variable(BaseModel):
    id_short: str = Field(..., examples=['Variable'], title='Id Short')
    description: str = Field(
        ...,
        examples=[
            'Submodel element collection with id Variable that contains submodel elements'
        ],
        title='Description',
    )
    semantic_id: str = Field(..., examples=[''], title='Semantic Id')
    variable_name: str = Field(..., examples=[], title='Variable Name')
    range: str = Field(..., examples=[], title='Range')
    variable_type: str = Field(..., examples=[], title='Variable Type')
    variable_description: str = Field(..., examples=[], title='Variable Description')
    unit_list: str = Field(..., examples=[], title='Unit List')
    unit_description: str = Field(..., examples=[], title='Unit Description')
    variable_causality: str = Field(..., examples=[], title='Variable Causality')
    variable_prefix: str = Field(..., examples=[], title='Variable Prefix')


class ModelFile(BaseModel):
    id_short: str = Field(..., examples=['ModelFile'], title='Id Short')
    description: str = Field(
        ...,
        examples=[
            'Submodel element collection with id ModelFile that contains submodel elements'
        ],
        title='Description',
    )
    semantic_id: str = Field(..., examples=[''], title='Semantic Id')
    model_file_type: str = Field(..., examples=[], title='Model File Type')
    model_file_version: ModelFileVersion = Field(..., examples=[])


class PortsConnector(BaseModel):
    id_short: str = Field(..., examples=['PortsConnector'], title='Id Short')
    description: str = Field(
        ...,
        examples=[
            'Submodel element collection with id PortsConnector that contains submodel elements'
        ],
        title='Description',
    )
    semantic_id: str = Field(..., examples=[''], title='Semantic Id')
    port_connector_name: str = Field(..., examples=[], title='Port Connector Name')
    port_con_description: str = Field(..., examples=[], title='Port Con Description')
    variable: Variable = Field(..., examples=[])


class SolverAndTolerances(BaseModel):
    id_short: str = Field(..., examples=['SolverAndTolerances'], title='Id Short')
    description: str = Field(
        ...,
        examples=[
            'Submodel element collection with id SolverAndTolerances that contains submodel elements'
        ],
        title='Description',
    )
    semantic_id: str = Field(..., examples=[''], title='Semantic Id')
    step_size_control_needed: bool = Field(
        ..., examples=[], title='Step Size Control Needed'
    )
    fixed_step_size: float = Field(..., examples=[], title='Fixed Step Size')
    stiff_solver_needed: bool = Field(..., examples=[], title='Stiff Solver Needed')
    solver_included: bool = Field(..., examples=[], title='Solver Included')
    tested_tool_solver_algorithm: TestedToolSolverAlgorithm = Field(..., examples=[])


class Ports(BaseModel):
    id_short: str = Field(..., examples=['Ports'], title='Id Short')
    description: str = Field(
        ...,
        examples=[
            'Submodel element collection with id Ports that contains submodel elements'
        ],
        title='Description',
    )
    semantic_id: str = Field(..., examples=[''], title='Semantic Id')
    ports_connector: PortsConnector = Field(..., examples=[])
    binary_connector: BinaryConnector = Field(..., examples=[])


class SimulationTool(BaseModel):
    id_short: str = Field(..., examples=['SimulationTool'], title='Id Short')
    description: str = Field(
        ...,
        examples=[
            'Submodel element collection with id SimulationTool that contains submodel elements'
        ],
        title='Description',
    )
    semantic_id: str = Field(..., examples=[''], title='Semantic Id')
    sim_tool_name: str = Field(..., examples=[], title='Sim Tool Name')
    dependency_sim_tool: str = Field(..., examples=[], title='Dependency Sim Tool')
    compiler: str = Field(..., examples=[], title='Compiler')
    solver_and_tolerances: SolverAndTolerances = Field(..., examples=[])


class Environment(BaseModel):
    id_short: str = Field(..., examples=['Environment'], title='Id Short')
    description: str = Field(
        ...,
        examples=[
            'Submodel element collection with id Environment that contains submodel elements'
        ],
        title='Description',
    )
    semantic_id: str = Field(..., examples=[''], title='Semantic Id')
    operating_system: str = Field(..., examples=[], title='Operating System')
    tool_environment: str = Field(..., examples=[], title='Tool Environment')
    dependency_environment: str = Field(
        ..., examples=[], title='Dependency Environment'
    )
    visualization_information: str = Field(
        ..., examples=[], title='Visualization Information'
    )
    simulation_tool: SimulationTool = Field(..., examples=[])


class SimulationModel(BaseModel):
    id_short: str = Field(..., examples=['SimulationModel'], title='Id Short')
    description: str = Field(
        ...,
        examples=[
            'Submodel element collection with id SimulationModel that contains submodel elements'
        ],
        title='Description',
    )
    semantic_id: str = Field(..., examples=[''], title='Semantic Id')
    summary: str = Field(..., examples=[], title='Summary')
    sim_purpose: SimPurpose = Field(..., examples=[])
    type_of_model: str = Field(..., examples=[], title='Type Of Model')
    scope_of_model: str = Field(..., examples=[], title='Scope Of Model')
    license_model: str = Field(..., examples=[], title='License Model')
    engineering_domain: str = Field(..., examples=[], title='Engineering Domain')
    environment: Environment = Field(..., examples=[])
    model_file: ModelFile = Field(..., examples=[])
    param_method: str = Field(..., examples=[], title='Param Method')
    init_state_method: str = Field(..., examples=[], title='Init State Method')
    default_sim_time: float = Field(..., examples=[], title='Default Sim Time')
    sim_mod_manufacturer_information: SimModManufacturerInformation = Field(
        ..., examples=[]
    )
    ports: Ports = Field(..., examples=[])


class SimulationModels(BaseModel):
    id_short: str = Field(..., examples=['SimulationModels'], title='Id Short')
    description: str = Field(
        ...,
        examples=['Submodel with id SimulationModels that contains submodel elements'],
        title='Description',
    )
    id: str = Field(..., examples=['SimulationModels'], title='Id')
    semantic_id: str = Field(..., examples=[''], title='Semantic Id')
    simulation_model: SimulationModel = Field(..., examples=[])


class ProvisionofSimulationModelsAAS(BaseModel):
    id_short: str = Field(
        ..., examples=['ProvisionofSimulationModelsAAS'], title='Id Short'
    )
    description: str = Field(
        ...,
        examples=[
            'Type aas with id ProvisionofSimulationModelsAAS that contains submodel templates'
        ],
        title='Description',
    )
    id: str = Field(..., examples=['ProvisionofSimulationModelsAAS'], title='Id')
    simulation_models: SimulationModels = Field(..., examples=[])
