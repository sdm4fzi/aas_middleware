# generated by datamodel-codegen:
#   filename:  20231106_101553_JSONSchema.json
#   timestamp: 2024-05-30T17:50:48+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel, Field, RootModel, confloat
from typing_extensions import Literal


class Settings(BaseModel):
    simulationStartDate: str = Field(
        ...,
        description='Start date of the simulation (ISO 8601).<br>Should be specified as UTC at midnight (00:00:00Z).',
        title='simulationStartDate',
    )
    simulationEndDate: str = Field(
        ...,
        description='End date of the simulation (ISO 8601).<br>Should be specified as UTC at midnight (00:00:00Z).',
        title='simulationEndDate',
    )
    initialStatsOffsetInHours: float = Field(
        ...,
        description='Initial offset in hours after which the stats will be recorded.',
        title='initialStatsOffsetInHours',
    )
    simulationApiVersion: str = Field(
        ...,
        description='API version of the backend simulation model',
        title='simulationApiVersion',
    )
    userLanguage: str = Field(
        ...,
        description='Current language of the user (two-letter language code)',
        title='userLanguage',
    )
    randomNumbersVariant: float = Field(
        ...,
        description='Random seed to initialize the pseudorandom number generator.',
        title='randomNumbersVariant',
    )


class Parameter(BaseModel):
    type: Literal['time'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[float] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['v_tiCycleTime'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Value(Enum):
    negexp = 'negexp'
    const = 'const'


class Parameter1(BaseModel):
    type: Literal['enum'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[Value] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['v_sDistrCycleTime'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Parameter2(BaseModel):
    type: Literal['boolean'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[bool] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['v_bUseProductionPlan'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Row(BaseModel):
    col_Frequency: Optional[confloat(ge=0.0, le=100.0)] = None
    col_Number: Optional[float] = None
    col_Name: Optional[str] = None


class Value1(BaseModel):
    rows: Optional[List[Row]] = None


class Parameter3(BaseModel):
    type: Literal['tableGrid'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[Value1] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['t_TypeMix_Import'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Row1(BaseModel):
    col_DeliveryTime: Optional[float] = None
    col_Number: Optional[float] = None
    col_Name: Optional[str] = None


class Value2(BaseModel):
    rows: Optional[List[Row1]] = None


class Parameter4(BaseModel):
    type: Literal['tableGrid'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[Value2] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['t_ProductionPlan_Import'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Parameter5(BaseModel):
    type: Literal['boolean'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[bool] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['v_bUseWorkPlan'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Row2(BaseModel):
    col_VariantTypes: Optional[str] = None
    col_StepNr: Optional[confloat(ge=1.0)] = None
    col_ResourceId: Optional[str] = None
    col_ProcTime: Optional[confloat(ge=0.0)] = None
    col_Comment: Optional[str] = None


class Value3(BaseModel):
    rows: Optional[List[Row2]] = None


class Parameter6(BaseModel):
    type: Literal['tableGrid'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[Value3] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['t_configWorkplan'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Parameter7(BaseModel):
    type: Literal['boolean'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[bool] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['v_bUseSchedule'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Value4(Enum):
    no_rescheduling = 'no rescheduling'
    reschedule_always_ok = 'reschedule always ok'


class Parameter8(BaseModel):
    type: Literal['enum'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[Value4] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['v_sModeRescheduling'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Row3(BaseModel):
    col_JobTask_id: Optional[float] = Field(None, alias='col_JobTask|id')
    col_JobTask_name: Optional[str] = Field(None, alias='col_JobTask|name')
    col_JobTask_jobId: Optional[float] = Field(None, alias='col_JobTask|jobId')
    col_JobTask_jobName: Optional[str] = Field(None, alias='col_JobTask|jobName')
    col_JobTask_taskId: Optional[float] = Field(None, alias='col_JobTask|taskId')
    col_JobTask_taskName: Optional[str] = Field(None, alias='col_JobTask|taskName')
    col_Job_Workplan: Optional[str] = Field(None, alias='col_Job|Workplan')
    col_resourceId: Optional[float] = None
    col_resourceName: Optional[str] = None
    col_arrivalDate: Optional[str] = None
    col_setupBeginDate: Optional[str] = None
    col_processBeginDate: Optional[str] = None
    col_processEndDate: Optional[str] = None
    col_teardownEndDate: Optional[str] = None
    col_departureDate: Optional[str] = None


class Value5(BaseModel):
    rows: Optional[List[Row3]] = None


class Parameter9(BaseModel):
    type: Literal['tableGrid'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[Value5] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['t_Schedule_Import'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Flip(BaseModel):
    flipY: bool = Field(
        ...,
        description='Flag if this icon should be flipped vertically.',
        title='flipY',
    )
    flipX: bool = Field(
        ...,
        description='Flag if this icon should be flipped horizontally.',
        title='flipX',
    )


class ImageTransform(BaseModel):
    flip: Optional[Flip] = Field(None, description='Image flip options', title='flip')
    scale: Optional[float] = Field(
        None, description='Scale of the image. Default scale is 1.', title='scale'
    )
    angle: Optional[float] = Field(
        None,
        description='The rotation angle of the image (Value between 0 and 360)',
        title='angle',
    )


class ParameterTableLayout(BaseModel):
    labelColumnWidth: Optional[float] = Field(
        None, description='The width of the label column', title='labelColumnWidth'
    )
    valueColumnWidth: Optional[float] = Field(
        None, description='The width of the value column', title='valueColumnWidth'
    )


class NodeDataArray1(BaseModel):
    parameters: List[
        Union[
            Parameter,
            Parameter1,
            Parameter2,
            Parameter3,
            Parameter4,
            Parameter5,
            Parameter6,
            Parameter7,
            Parameter8,
            Parameter9,
        ]
    ] = Field(..., max_length=10, min_length=10, title='parameters')
    key: float = Field(..., description='The unique key of the node', title='key')
    loc: str = Field(
        ...,
        description='The location of the node in the diagram.<br>Format of this property is the x-coordinate, a space, and then the y-coordinate (e.g. "0 0" or "-200 400").<br>Increasing values of x are going rightwards and increasing values of y are going downwards.',
        title='loc',
    )
    category: Literal['item'] = Field(
        ...,
        description='Specifies the category, used for determining the visual template to use.',
        title='category',
    )
    nodeName: str = Field(
        ..., description='The (unique) name of the item', title='nodeName'
    )
    class_: Literal['source'] = Field(
        ...,
        alias='class',
        description='Specifies a unique identifier which describes the current node type (e.g. process, store or customer).',
        title='class',
    )
    photoNames: List[str] = Field(
        ..., description='File names of the attached photos', title='photoNames'
    )
    imageClass: Optional[str] = Field(
        None,
        description='Identifier for determining the node icon from the toolbox to be used.',
        title='imageClass',
    )
    imageTransform: Optional[ImageTransform] = Field(
        None,
        description='Transformation options for the node icon.',
        title='imageTransform',
    )
    parameterTableLayout: Optional[ParameterTableLayout] = Field(
        None,
        description='Layout options for the parameter table',
        title='parameterTableLayout',
    )


class ImageTransform1(BaseModel):
    flip: Optional[Flip] = Field(None, description='Image flip options', title='flip')
    scale: Optional[float] = Field(
        None, description='Scale of the image. Default scale is 1.', title='scale'
    )
    angle: Optional[float] = Field(
        None,
        description='The rotation angle of the image (Value between 0 and 360)',
        title='angle',
    )


class NodeDataArray2(BaseModel):
    key: float = Field(..., description='The unique key of the node', title='key')
    loc: str = Field(
        ...,
        description='The location of the node in the diagram.<br>Format of this property is the x-coordinate, a space, and then the y-coordinate (e.g. "0 0" or "-200 400").<br>Increasing values of x are going rightwards and increasing values of y are going downwards.',
        title='loc',
    )
    category: Literal['item'] = Field(
        ...,
        description='Specifies the category, used for determining the visual template to use.',
        title='category',
    )
    nodeName: str = Field(
        ..., description='The (unique) name of the item', title='nodeName'
    )
    class_: Literal['drain'] = Field(
        ...,
        alias='class',
        description='Specifies a unique identifier which describes the current node type (e.g. process, store or customer).',
        title='class',
    )
    photoNames: List[str] = Field(
        ..., description='File names of the attached photos', title='photoNames'
    )
    imageClass: Optional[str] = Field(
        None,
        description='Identifier for determining the node icon from the toolbox to be used.',
        title='imageClass',
    )
    imageTransform: Optional[ImageTransform1] = Field(
        None,
        description='Transformation options for the node icon.',
        title='imageTransform',
    )
    parameterTableLayout: Optional[ParameterTableLayout] = Field(
        None,
        description='Layout options for the parameter table',
        title='parameterTableLayout',
    )


class Parameter10(BaseModel):
    type: Literal['number'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[confloat(ge=1.0)] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['v_iNumAGVs'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Parameter11(BaseModel):
    type: Literal['boolean'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[bool] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['v_bParkWhenIdle'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Parameter12(BaseModel):
    type: Literal['number'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[confloat(ge=0.01)] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['v_rDriveSpeed'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Parameter13(BaseModel):
    type: Literal['number'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[confloat(ge=1.0)] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['v_rRotateSpeed'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Parameter14(BaseModel):
    type: Literal['number'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[float] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['v_rAcceleration'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class ImageTransform2(BaseModel):
    flip: Optional[Flip] = Field(None, description='Image flip options', title='flip')
    scale: Optional[float] = Field(
        None, description='Scale of the image. Default scale is 1.', title='scale'
    )
    angle: Optional[float] = Field(
        None,
        description='The rotation angle of the image (Value between 0 and 360)',
        title='angle',
    )


class NodeDataArray3(BaseModel):
    parameters: List[
        Union[Parameter10, Parameter11, Parameter12, Parameter13, Parameter14]
    ] = Field(..., max_length=5, min_length=5, title='parameters')
    key: float = Field(..., description='The unique key of the node', title='key')
    loc: str = Field(
        ...,
        description='The location of the node in the diagram.<br>Format of this property is the x-coordinate, a space, and then the y-coordinate (e.g. "0 0" or "-200 400").<br>Increasing values of x are going rightwards and increasing values of y are going downwards.',
        title='loc',
    )
    category: Literal['item'] = Field(
        ...,
        description='Specifies the category, used for determining the visual template to use.',
        title='category',
    )
    nodeName: str = Field(
        ..., description='The (unique) name of the item', title='nodeName'
    )
    class_: Literal['agvPool'] = Field(
        ...,
        alias='class',
        description='Specifies a unique identifier which describes the current node type (e.g. process, store or customer).',
        title='class',
    )
    photoNames: List[str] = Field(
        ..., description='File names of the attached photos', title='photoNames'
    )
    imageClass: Optional[str] = Field(
        None,
        description='Identifier for determining the node icon from the toolbox to be used.',
        title='imageClass',
    )
    imageTransform: Optional[ImageTransform2] = Field(
        None,
        description='Transformation options for the node icon.',
        title='imageTransform',
    )
    parameterTableLayout: Optional[ParameterTableLayout] = Field(
        None,
        description='Layout options for the parameter table',
        title='parameterTableLayout',
    )


class Parameter15(BaseModel):
    type: Literal['string'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[str] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['Label'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Parameter16(BaseModel):
    type: Literal['time'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[float] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['v_tiProcTime'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Parameter17(BaseModel):
    type: Literal['boolean'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[bool] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['v_bUseSetupMatrix'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Parameter18(BaseModel):
    type: Literal['time'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[float] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['v_tiSetupTime'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Row4(BaseModel):
    col_setupIndex: Optional[str] = None
    col01_setupType: Optional[float] = None
    col02_setupType: Optional[float] = None
    col03_setupType: Optional[float] = None
    col04_setupType: Optional[float] = None
    col05_setupType: Optional[float] = None
    col06_setupType: Optional[float] = None
    col07_setupType: Optional[float] = None
    col08_setupType: Optional[float] = None
    col09_setupType: Optional[float] = None
    col10_setupType: Optional[float] = None
    col11_setupType: Optional[float] = None
    col12_setupType: Optional[float] = None
    col13_setupType: Optional[float] = None
    col14_setupType: Optional[float] = None
    col15_setupType: Optional[float] = None
    col16_setupType: Optional[float] = None
    col17_setupType: Optional[float] = None
    col18_setupType: Optional[float] = None
    col19_setupType: Optional[float] = None
    col20_setupType: Optional[float] = None


class Value6(BaseModel):
    rows: Optional[List[Row4]] = None


class Parameter19(BaseModel):
    type: Literal['tableGrid'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[Value6] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['t_SetupMatrix'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Parameter20(BaseModel):
    type: Literal['number'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[confloat(ge=1.0)] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['v_iWPCPortCapacity'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Parameter21(BaseModel):
    type: Literal['time'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[float] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['v_tiConveyingWPC'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Parameter22(BaseModel):
    type: Literal['number'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[confloat(ge=0.0, le=100.0)] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['v_rAvailability'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Parameter23(BaseModel):
    type: Literal['time'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[float] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['v_tiMTTR'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Row5(BaseModel):
    col_ResourceId: Optional[str] = None
    col_Comment: Optional[str] = None


class Value7(BaseModel):
    rows: Optional[List[Row5]] = None


class Parameter24(BaseModel):
    type: Literal['tableGrid'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[Value7] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['t_configResources'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Parameter25(BaseModel):
    type: Literal['number'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[float] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['v_iMachineId'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class ImageTransform3(BaseModel):
    flip: Optional[Flip] = Field(None, description='Image flip options', title='flip')
    scale: Optional[float] = Field(
        None, description='Scale of the image. Default scale is 1.', title='scale'
    )
    angle: Optional[float] = Field(
        None,
        description='The rotation angle of the image (Value between 0 and 360)',
        title='angle',
    )


class NodeDataArray4(BaseModel):
    parameters: List[
        Union[
            Parameter15,
            Parameter16,
            Parameter17,
            Parameter18,
            Parameter19,
            Parameter20,
            Parameter21,
            Parameter22,
            Parameter23,
            Parameter24,
            Parameter25,
        ]
    ] = Field(..., max_length=11, min_length=11, title='parameters')
    key: float = Field(..., description='The unique key of the node', title='key')
    loc: str = Field(
        ...,
        description='The location of the node in the diagram.<br>Format of this property is the x-coordinate, a space, and then the y-coordinate (e.g. "0 0" or "-200 400").<br>Increasing values of x are going rightwards and increasing values of y are going downwards.',
        title='loc',
    )
    category: Literal['item'] = Field(
        ...,
        description='Specifies the category, used for determining the visual template to use.',
        title='category',
    )
    nodeName: str = Field(
        ..., description='The (unique) name of the item', title='nodeName'
    )
    class_: Literal['ca3sarCell'] = Field(
        ...,
        alias='class',
        description='Specifies a unique identifier which describes the current node type (e.g. process, store or customer).',
        title='class',
    )
    photoNames: List[str] = Field(
        ..., description='File names of the attached photos', title='photoNames'
    )
    imageClass: Optional[str] = Field(
        None,
        description='Identifier for determining the node icon from the toolbox to be used.',
        title='imageClass',
    )
    imageTransform: Optional[ImageTransform3] = Field(
        None,
        description='Transformation options for the node icon.',
        title='imageTransform',
    )
    parameterTableLayout: Optional[ParameterTableLayout] = Field(
        None,
        description='Layout options for the parameter table',
        title='parameterTableLayout',
    )


class Parameter26(BaseModel):
    type: Literal['string'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[str] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['Label'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Parameter27(BaseModel):
    type: Literal['time'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[float] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['v_tiProcTime'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Parameter28(BaseModel):
    type: Literal['boolean'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[bool] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['v_bUseSetupMatrix'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Parameter29(BaseModel):
    type: Literal['time'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[float] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['v_tiSetupTime'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Row6(BaseModel):
    col_setupIndex: Optional[str] = None
    col01_setupType: Optional[float] = None
    col02_setupType: Optional[float] = None
    col03_setupType: Optional[float] = None
    col04_setupType: Optional[float] = None
    col05_setupType: Optional[float] = None
    col06_setupType: Optional[float] = None
    col07_setupType: Optional[float] = None
    col08_setupType: Optional[float] = None
    col09_setupType: Optional[float] = None
    col10_setupType: Optional[float] = None
    col11_setupType: Optional[float] = None
    col12_setupType: Optional[float] = None
    col13_setupType: Optional[float] = None
    col14_setupType: Optional[float] = None
    col15_setupType: Optional[float] = None
    col16_setupType: Optional[float] = None
    col17_setupType: Optional[float] = None
    col18_setupType: Optional[float] = None
    col19_setupType: Optional[float] = None
    col20_setupType: Optional[float] = None


class Value8(BaseModel):
    rows: Optional[List[Row6]] = None


class Parameter30(BaseModel):
    type: Literal['tableGrid'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[Value8] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['t_SetupMatrix'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Parameter31(BaseModel):
    type: Literal['number'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[confloat(ge=1.0)] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['v_iWPCPortCapacity'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Parameter32(BaseModel):
    type: Literal['time'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[float] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['v_tiConveyingWPC'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Parameter33(BaseModel):
    type: Literal['number'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[confloat(ge=0.0, le=100.0)] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['v_rAvailability'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Parameter34(BaseModel):
    type: Literal['time'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[float] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['v_tiMTTR'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Row7(BaseModel):
    col_ResourceId: Optional[str] = None
    col_Comment: Optional[str] = None


class Value9(BaseModel):
    rows: Optional[List[Row7]] = None


class Parameter35(BaseModel):
    type: Literal['tableGrid'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[Value9] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['t_configResources'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Parameter36(BaseModel):
    type: Literal['number'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[float] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['v_iMachineId'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class ImageTransform4(BaseModel):
    flip: Optional[Flip] = Field(None, description='Image flip options', title='flip')
    scale: Optional[float] = Field(
        None, description='Scale of the image. Default scale is 1.', title='scale'
    )
    angle: Optional[float] = Field(
        None,
        description='The rotation angle of the image (Value between 0 and 360)',
        title='angle',
    )


class NodeDataArray5(BaseModel):
    parameters: List[
        Union[
            Parameter26,
            Parameter27,
            Parameter28,
            Parameter29,
            Parameter30,
            Parameter31,
            Parameter32,
            Parameter33,
            Parameter34,
            Parameter35,
            Parameter36,
        ]
    ] = Field(..., max_length=11, min_length=11, title='parameters')
    key: float = Field(..., description='The unique key of the node', title='key')
    loc: str = Field(
        ...,
        description='The location of the node in the diagram.<br>Format of this property is the x-coordinate, a space, and then the y-coordinate (e.g. "0 0" or "-200 400").<br>Increasing values of x are going rightwards and increasing values of y are going downwards.',
        title='loc',
    )
    category: Literal['item'] = Field(
        ...,
        description='Specifies the category, used for determining the visual template to use.',
        title='category',
    )
    nodeName: str = Field(
        ..., description='The (unique) name of the item', title='nodeName'
    )
    class_: Literal['virtualCell'] = Field(
        ...,
        alias='class',
        description='Specifies a unique identifier which describes the current node type (e.g. process, store or customer).',
        title='class',
    )
    photoNames: List[str] = Field(
        ..., description='File names of the attached photos', title='photoNames'
    )
    imageClass: Optional[str] = Field(
        None,
        description='Identifier for determining the node icon from the toolbox to be used.',
        title='imageClass',
    )
    imageTransform: Optional[ImageTransform4] = Field(
        None,
        description='Transformation options for the node icon.',
        title='imageTransform',
    )
    parameterTableLayout: Optional[ParameterTableLayout] = Field(
        None,
        description='Layout options for the parameter table',
        title='parameterTableLayout',
    )


class Parameter37(BaseModel):
    type: Literal['string'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[str] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['Label'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Parameter38(BaseModel):
    type: Literal['time'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[float] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['v_tiProcTime'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Parameter39(BaseModel):
    type: Literal['boolean'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[bool] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['v_bUseSetupMatrix'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Parameter40(BaseModel):
    type: Literal['time'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[float] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['v_tiSetupTime'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Row8(BaseModel):
    col_setupIndex: Optional[str] = None
    col01_setupType: Optional[float] = None
    col02_setupType: Optional[float] = None
    col03_setupType: Optional[float] = None
    col04_setupType: Optional[float] = None
    col05_setupType: Optional[float] = None
    col06_setupType: Optional[float] = None
    col07_setupType: Optional[float] = None
    col08_setupType: Optional[float] = None
    col09_setupType: Optional[float] = None
    col10_setupType: Optional[float] = None
    col11_setupType: Optional[float] = None
    col12_setupType: Optional[float] = None
    col13_setupType: Optional[float] = None
    col14_setupType: Optional[float] = None
    col15_setupType: Optional[float] = None
    col16_setupType: Optional[float] = None
    col17_setupType: Optional[float] = None
    col18_setupType: Optional[float] = None
    col19_setupType: Optional[float] = None
    col20_setupType: Optional[float] = None


class Value10(BaseModel):
    rows: Optional[List[Row8]] = None


class Parameter41(BaseModel):
    type: Literal['tableGrid'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[Value10] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['t_SetupMatrix'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Parameter42(BaseModel):
    type: Literal['number'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[confloat(ge=1.0)] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['v_iCapacityIn'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Parameter43(BaseModel):
    type: Literal['number'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[confloat(ge=1.0)] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['v_iCapacityOut'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Parameter44(BaseModel):
    type: Literal['number'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[confloat(ge=0.0, le=100.0)] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['v_rAvailability'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Parameter45(BaseModel):
    type: Literal['time'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[float] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['v_tiMTTR'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Row9(BaseModel):
    col_ResourceId: Optional[str] = None
    col_Comment: Optional[str] = None


class Value11(BaseModel):
    rows: Optional[List[Row9]] = None


class Parameter46(BaseModel):
    type: Literal['tableGrid'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[Value11] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['t_configResources'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class Parameter47(BaseModel):
    type: Literal['number'] = Field(
        ..., description='Data type of the parameter', title='type'
    )
    value: Optional[float] = Field(
        None, description='Value of the parameter', title='value'
    )
    class_: Literal['v_iMachineId'] = Field(
        ...,
        alias='class',
        description='Identifier for the parameter, used to find the parameter definition in the toolbox',
        title='class',
    )


class ImageTransform5(BaseModel):
    flip: Optional[Flip] = Field(None, description='Image flip options', title='flip')
    scale: Optional[float] = Field(
        None, description='Scale of the image. Default scale is 1.', title='scale'
    )
    angle: Optional[float] = Field(
        None,
        description='The rotation angle of the image (Value between 0 and 360)',
        title='angle',
    )


class NodeDataArray6(BaseModel):
    parameters: List[
        Union[
            Parameter37,
            Parameter38,
            Parameter39,
            Parameter40,
            Parameter41,
            Parameter42,
            Parameter43,
            Parameter44,
            Parameter45,
            Parameter46,
            Parameter47,
        ]
    ] = Field(..., max_length=11, min_length=11, title='parameters')
    key: float = Field(..., description='The unique key of the node', title='key')
    loc: str = Field(
        ...,
        description='The location of the node in the diagram.<br>Format of this property is the x-coordinate, a space, and then the y-coordinate (e.g. "0 0" or "-200 400").<br>Increasing values of x are going rightwards and increasing values of y are going downwards.',
        title='loc',
    )
    category: Literal['item'] = Field(
        ...,
        description='Specifies the category, used for determining the visual template to use.',
        title='category',
    )
    nodeName: str = Field(
        ..., description='The (unique) name of the item', title='nodeName'
    )
    class_: Literal['blackbox'] = Field(
        ...,
        alias='class',
        description='Specifies a unique identifier which describes the current node type (e.g. process, store or customer).',
        title='class',
    )
    photoNames: List[str] = Field(
        ..., description='File names of the attached photos', title='photoNames'
    )
    imageClass: Optional[str] = Field(
        None,
        description='Identifier for determining the node icon from the toolbox to be used.',
        title='imageClass',
    )
    imageTransform: Optional[ImageTransform5] = Field(
        None,
        description='Transformation options for the node icon.',
        title='imageTransform',
    )
    parameterTableLayout: Optional[ParameterTableLayout] = Field(
        None,
        description='Layout options for the parameter table',
        title='parameterTableLayout',
    )


class ImageTransform6(BaseModel):
    flip: Optional[Flip] = Field(None, description='Image flip options', title='flip')
    scale: Optional[float] = Field(
        None, description='Scale of the image. Default scale is 1.', title='scale'
    )
    angle: Optional[float] = Field(
        None,
        description='The rotation angle of the image (Value between 0 and 360)',
        title='angle',
    )


class NodeDataArray7(BaseModel):
    key: float = Field(..., description='The unique key of the node', title='key')
    loc: str = Field(
        ...,
        description='The location of the node in the diagram.<br>Format of this property is the x-coordinate, a space, and then the y-coordinate (e.g. "0 0" or "-200 400").<br>Increasing values of x are going rightwards and increasing values of y are going downwards.',
        title='loc',
    )
    category: Literal['item'] = Field(
        ...,
        description='Specifies the category, used for determining the visual template to use.',
        title='category',
    )
    nodeName: str = Field(
        ..., description='The (unique) name of the item', title='nodeName'
    )
    class_: Literal['rack'] = Field(
        ...,
        alias='class',
        description='Specifies a unique identifier which describes the current node type (e.g. process, store or customer).',
        title='class',
    )
    photoNames: List[str] = Field(
        ..., description='File names of the attached photos', title='photoNames'
    )
    imageClass: Optional[str] = Field(
        None,
        description='Identifier for determining the node icon from the toolbox to be used.',
        title='imageClass',
    )
    imageTransform: Optional[ImageTransform6] = Field(
        None,
        description='Transformation options for the node icon.',
        title='imageTransform',
    )
    parameterTableLayout: Optional[ParameterTableLayout] = Field(
        None,
        description='Layout options for the parameter table',
        title='parameterTableLayout',
    )


class ImageTransform7(BaseModel):
    flip: Optional[Flip] = Field(None, description='Image flip options', title='flip')
    scale: Optional[float] = Field(
        None, description='Scale of the image. Default scale is 1.', title='scale'
    )
    angle: Optional[float] = Field(
        None,
        description='The rotation angle of the image (Value between 0 and 360)',
        title='angle',
    )


class NodeDataArray8(BaseModel):
    key: float = Field(..., description='The unique key of the node', title='key')
    loc: str = Field(
        ...,
        description='The location of the node in the diagram.<br>Format of this property is the x-coordinate, a space, and then the y-coordinate (e.g. "0 0" or "-200 400").<br>Increasing values of x are going rightwards and increasing values of y are going downwards.',
        title='loc',
    )
    category: Literal['item'] = Field(
        ...,
        description='Specifies the category, used for determining the visual template to use.',
        title='category',
    )
    nodeName: str = Field(
        ..., description='The (unique) name of the item', title='nodeName'
    )
    class_: Literal['desk'] = Field(
        ...,
        alias='class',
        description='Specifies a unique identifier which describes the current node type (e.g. process, store or customer).',
        title='class',
    )
    photoNames: List[str] = Field(
        ..., description='File names of the attached photos', title='photoNames'
    )
    imageClass: Optional[str] = Field(
        None,
        description='Identifier for determining the node icon from the toolbox to be used.',
        title='imageClass',
    )
    imageTransform: Optional[ImageTransform7] = Field(
        None,
        description='Transformation options for the node icon.',
        title='imageTransform',
    )
    parameterTableLayout: Optional[ParameterTableLayout] = Field(
        None,
        description='Layout options for the parameter table',
        title='parameterTableLayout',
    )


class ImageTransform8(BaseModel):
    flip: Optional[Flip] = Field(None, description='Image flip options', title='flip')
    scale: Optional[float] = Field(
        None, description='Scale of the image. Default scale is 1.', title='scale'
    )
    angle: Optional[float] = Field(
        None,
        description='The rotation angle of the image (Value between 0 and 360)',
        title='angle',
    )


class NodeDataArray9(BaseModel):
    key: float = Field(..., description='The unique key of the node', title='key')
    loc: str = Field(
        ...,
        description='The location of the node in the diagram.<br>Format of this property is the x-coordinate, a space, and then the y-coordinate (e.g. "0 0" or "-200 400").<br>Increasing values of x are going rightwards and increasing values of y are going downwards.',
        title='loc',
    )
    category: Literal['item'] = Field(
        ...,
        description='Specifies the category, used for determining the visual template to use.',
        title='category',
    )
    nodeName: str = Field(
        ..., description='The (unique) name of the item', title='nodeName'
    )
    class_: Literal['customText'] = Field(
        ...,
        alias='class',
        description='Specifies a unique identifier which describes the current node type (e.g. process, store or customer).',
        title='class',
    )
    photoNames: List[str] = Field(
        ..., description='File names of the attached photos', title='photoNames'
    )
    imageClass: Optional[str] = Field(
        None,
        description='Identifier for determining the node icon from the toolbox to be used.',
        title='imageClass',
    )
    imageTransform: Optional[ImageTransform8] = Field(
        None,
        description='Transformation options for the node icon.',
        title='imageTransform',
    )
    parameterTableLayout: Optional[ParameterTableLayout] = Field(
        None,
        description='Layout options for the parameter table',
        title='parameterTableLayout',
    )


class ImageTransform9(BaseModel):
    flip: Optional[Flip] = Field(None, description='Image flip options', title='flip')
    scale: Optional[float] = Field(
        None, description='Scale of the image. Default scale is 1.', title='scale'
    )
    angle: Optional[float] = Field(
        None,
        description='The rotation angle of the image (Value between 0 and 360)',
        title='angle',
    )


class NodeDataArray10(BaseModel):
    key: float = Field(..., description='The unique key of the node', title='key')
    loc: str = Field(
        ...,
        description='The location of the node in the diagram.<br>Format of this property is the x-coordinate, a space, and then the y-coordinate (e.g. "0 0" or "-200 400").<br>Increasing values of x are going rightwards and increasing values of y are going downwards.',
        title='loc',
    )
    category: Literal['item'] = Field(
        ...,
        description='Specifies the category, used for determining the visual template to use.',
        title='category',
    )
    nodeName: str = Field(
        ..., description='The (unique) name of the item', title='nodeName'
    )
    class_: Literal['BackgroundImage'] = Field(
        ...,
        alias='class',
        description='Specifies a unique identifier which describes the current node type (e.g. process, store or customer).',
        title='class',
    )
    photoNames: List[str] = Field(
        ..., description='File names of the attached photos', title='photoNames'
    )
    imageClass: Optional[str] = Field(
        None,
        description='Identifier for determining the node icon from the toolbox to be used.',
        title='imageClass',
    )
    imageTransform: Optional[ImageTransform9] = Field(
        None,
        description='Transformation options for the node icon.',
        title='imageTransform',
    )
    parameterTableLayout: Optional[ParameterTableLayout] = Field(
        None,
        description='Layout options for the parameter table',
        title='parameterTableLayout',
    )


class NodeDataArray(
    RootModel[
        List[
            Union[
                NodeDataArray1,
                NodeDataArray2,
                NodeDataArray3,
                NodeDataArray4,
                NodeDataArray5,
                NodeDataArray6,
                NodeDataArray7,
                NodeDataArray8,
                NodeDataArray9,
                NodeDataArray10,
            ]
        ]
    ]
):
    root: List[
        Union[
            NodeDataArray1,
            NodeDataArray2,
            NodeDataArray3,
            NodeDataArray4,
            NodeDataArray5,
            NodeDataArray6,
            NodeDataArray7,
            NodeDataArray8,
            NodeDataArray9,
            NodeDataArray10,
        ]
    ] = Field(..., title='nodeDataArray')


class Category(Enum):
    item = 'item'


class FromPort(Enum):
    B = 'B'
    L = 'L'
    R = 'R'
    T = 'T'


class ToPort(Enum):
    B = 'B'
    L = 'L'
    R = 'R'
    T = 'T'


class Stroke(BaseModel):
    dashStyle: Optional[str] = Field(
        None, description='The name of the dash style', title='dashStyle'
    )


class Class(Enum):
    trsp_route_conn = 'trsp_route_conn'
    direct_conn = 'direct_conn'


class LinkDataArrayItem(BaseModel):
    category: Category = Field(
        ..., description='The category of the link', title='category'
    )
    fromPort: FromPort = Field(
        ..., description='Name of the port on the source node', title='fromPort'
    )
    toPort: ToPort = Field(
        ..., description='The port on the target node', title='toPort'
    )
    text: Optional[str] = Field(
        None, description='Text/description of the link', title='text'
    )
    textLocation: Optional[str] = Field(
        None, description='Location of the link text', title='textLocation'
    )
    routingBehaviour: Optional[str] = Field(
        None,
        description='Behaviour how the link route should be',
        title='routingBehaviour',
    )
    points: Optional[List[float]] = Field(
        None, description='Points of the link route', title='points'
    )
    stroke: Optional[Stroke] = Field(
        None, description='Properties for the stroke of a link', title='stroke'
    )
    comment: Optional[str] = Field(
        None, description='Text/comment of the link', title='comment'
    )
    class_: Class = Field(
        ..., alias='class', description='The class of the link', title='class'
    )
    from_: Optional[float] = Field(
        None, alias='from', description='The ID of the source node', title='from'
    )
    to: Optional[float] = Field(
        None, description='The ID of the target node', title='to'
    )


class LinkDataArray(RootModel[List[LinkDataArrayItem]]):
    root: List[LinkDataArrayItem] = Field(..., title='linkDataArray')


class Model1(BaseModel):
    nodeDataArray: NodeDataArray = Field(
        ..., description='List of nodes in this model', min_length=1
    )
    linkDataArray: LinkDataArray = Field(..., description='List of links in this model')


class Alternative(BaseModel):
    model: Model1 = Field(..., description='Model to be simulated', title='model')
    id: float = Field(..., description='ID of the alternative', title='id')
    name: str = Field(..., description='Name of the alternative', title='name')


class Model(BaseModel):
    alternatives: List[Alternative] = Field(
        ...,
        description='The alternative to be simulated.<br>This is an array, however it should currently contain only a single alternative.',
        title='alternatives',
    )
    id: float = Field(
        ..., description='ID of the project this simulation job belongs to', title='id'
    )
    name: str = Field(..., description='Name of the project', title='name')
    settings: Settings = Field(
        ..., description='Various settings for the simulation run', title='settings'
    )
